.. _remote_ctrl:**************Remote Control**************.. sidebar:: Summary    :Info: Xperior applications inter communication.     :Target: users    :Status: mature.. index:: single: remote_control`Pyro <https://pypi.python.org/pypi/Pyro4>`_ server and client implementation enabling the application remote control, i.e. remote access to the server's interpreter in order to execute and evaluate arbitrary client code. The server exists in two variants: Xperior :ref:`shell` server and :ref:`com_light` interpreter server; client's API is for both variants identical.* Multiple client, multiple servers scenario * HMAC key peer to peer communication security---------------------------Usecase-------.. _rem_usecase:Administration and control of other :doc:`Xperior Applications <../index>` being used in the connection scheme shows the picture below. *Admin client* workstation controls multiple *servers*, sending remote commands and fetching the remote objects for further evaluation. The typical usage is stopping/starting a script, getting the current status, executing remote processes, etc... figure:: ../images/XPERIOR-Remote-control-connection-example.jpg    :align: left    :figwidth: 100 %        Figure: Remote Control Example.. _rem_setup:    How to setup------------.. warning:: Enabling the server allows client programs to access the local shell, thus allowing full access to everything on your system. Only use it if you fully trust your environment and the clients that can connect to your machines. We suggests using a HMAC signature on every network transfer to prevent malicious requests. The idea is to only have legit clients connect to your server.In order to enable the server functionality, go to :menuselection:`Control->Remote Shell Server`:.. figure:: ../images/XPERIOR-remote-server-gui.png    :align: left    :figwidth: 100 %        Figure: Remote Shell Server - Configuration GUIAfter setting up and starting the server, you can control the Xperior application from arbitrary locations within the network like this:: client = remote_control.Client(password="123") client.connect(...) ## server's IP address or PC name  print "\nexecuting the command now..." client.execute("print 125")  print "\nevaluating the command now..." command = "5*5" result_dict = client.evaluate(command) print "result of %s is: %s" %(command, result_dict[remote_control.IP_ADDRESS])  print "\nevaluating the command now..." command = "_int.logger.GetValue()" result_dict = client.evaluate(command) print "result of %s is: %s" %(command, result_dict[remote_control.IP_ADDRESS][:100] + '...') An expected client output::  executing the command now... evaluating the command now... result of 5*5 is: 25 evaluating the command now... result of _int.logger.GetValue() is: 2014-03-13 10:39:27.910 [INFO    ] (          fapp-MainThread:init:35) start of applicationAn expected server's shell output:: ## [2014-03-14 16:16:43.327000, username@PCname] remote command (exec) -> print 125 125 #  [2014-03-14 16:16:43.328000] finished. ## [2014-03-14 16:16:43.331000, username@PCname] remote command (eval) -> 5*5 #  [2014-03-14 16:16:43.332000] output -> 25 ## [2014-03-14 16:16:43.335000, username@PCname] remote command (eval) -> _int.logger.GetValue() #  [2014-03-14 16:16:43.336000] output -> u'2014-03-13 10:39:27.910 [INFO    ] (          fapp-MainThread:init:35) start of application\n2014-03-13 10:39:27.910 [INFO    ] (You will receive **CommunicationError: cannot connect: message hmac mismatch** in case the password is not valid.You can find additional examples here: * Simple control: :download:`../../../source/examples/remote_control/Xperior/client_simple.py`* Starts and stops the client script at the server side: :download:`../../../source/examples/remote_control/Xperior/client_script_start_stop.py`* Gets the uptime from the server: :download:`../../../source/examples/remote_control/Xperior/client_get_uptime.py`.. _rem_desc:Functionality description-------------------------Server is initiated .. figure:: ../images/XPERIOR-Remote-control-client-server.jpg    :align: left    :width: 85 %    :figwidth: 100%        Figure: Remote Control Client-Server Interaction    API description---------------.. figure:: ../images/classes_RemoteControl.png    :align: left    :width: 75 %    :figwidth: 100 %        Figure: Remote Control - Module UML    .. automodule:: remote_control   :members: